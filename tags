!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
,<Space>	core/mappings.vim	/^nnoremap <silent> ,<Space> :<C-u>silent! keeppatterns %substitute\/\\s\\+$\/\/e<CR>$/;"	m
<C-O>	core/mappings.vim	/^inoremap <C-O> <Esc>o$/;"	m
<C-Q>	core/mappings.vim	/^imap <C-Q> <esc>:wq<CR>$/;"	m
<C-S>	core/mappings.vim	/^imap <C-S> <esc>:w<CR>$/;"	m
<C-a>	core/mappings.vim	/^cnoremap <C-a> <Home>$/;"	m
<C-b>	core/mappings.vim	/^cnoremap <C-b> <Left>$/;"	m
<C-b>	core/mappings.vim	/^noremap <expr> <C-b> max([winheight(0) - 2, 1])$/;"	m
<C-d>	core/mappings.vim	/^cnoremap <C-d> <Del>$/;"	m
<C-e>	core/mappings.vim	/^cnoremap <C-e> <End>$/;"	m
<C-e>	core/mappings.vim	/^noremap <expr> <C-e> (line("w$") >= line('$') ? "j" : "3\\<C-e>")$/;"	m
<C-f>	core/mappings.vim	/^cnoremap <C-f> <Right>$/;"	m
<C-f>	core/mappings.vim	/^noremap <expr> <C-f> max([winheight(0) - 2, 1])$/;"	m
<C-h>	core/mappings.vim	/^cnoremap <C-h> <BS>$/;"	m
<C-h>	core/mappings.vim	/^nnoremap <C-h> <C-w>h$/;"	m
<C-j>	core/mappings.vim	/^nnoremap <C-j> <C-w>j$/;"	m
<C-k>	core/mappings.vim	/^nnoremap <C-k> <C-w>k$/;"	m
<C-l>	core/mappings.vim	/^nnoremap <C-l> <C-w>l$/;"	m
<C-p>	core/mappings.vim	/^cnoremap <C-p> <Up>$/;"	m
<C-t>	core/mappings.vim	/^cnoremap <C-t> <C-R>=expand("%:p:h") . "\/" <CR>$/;"	m
<C-x>	core/mappings.vim	/^nnoremap  <C-x> :bd<CR>$/;"	m
<C-y>	core/mappings.vim	/^noremap <expr> <C-y> (line("w0") <= 1         ? "k" : "3\\<C-y>")$/;"	m
<LEADER>d"	core/mappings.vim	/^nnoremap <LEADER>d" ebF"xf"x$/;"	m
<LEADER>d'	core/mappings.vim	/^nnoremap <LEADER>d' ebF'xf'x$/;"	m
<LEADER>ev	core/mappings.vim	/^nnoremap <LEADER>ev :vsplit $MYVIMRC<CR>$/;"	m
<LEADER>l"	core/mappings.vim	/^nnoremap <LEADER>l"  ^i"<esc>g_a"<esc>$/;"	m
<LEADER>l'	core/mappings.vim	/^nnoremap <LEADER>l'  ^i'<esc>g_a"<esc>$/;"	m
<LEADER>sh	core/mappings.vim	/^nnoremap <LEADER>sh :set nosplitright<CR>:vsplit<CR>$/;"	m
<LEADER>sj	core/mappings.vim	/^nnoremap <LEADER>sj :set splitbelow<CR>:split<CR>$/;"	m
<LEADER>sk	core/mappings.vim	/^nnoremap <LEADER>sk :set nosplitbelow<CR>:split<CR>$/;"	m
<LEADER>sl	core/mappings.vim	/^nnoremap <LEADER>sl :set splitright<CR>:vsplit<CR>$/;"	m
<LEADER>sv	core/mappings.vim	/^nnoremap <LEADER>sv :source $MYVIMRC<CR>$/;"	m
<LEADER>te	core/mappings.vim	/^nnoremap <LEADER>te :tabe$/;"	m
<LEADER>th	core/mappings.vim	/^nnoremap <LEADER>th :-tabnext<CR>$/;"	m
<LEADER>tl	core/mappings.vim	/^nnoremap <LEADER>tl :+tabnext<CR>$/;"	m
<LEADER>tm	core/mappings.vim	/^nnoremap <LEADER>tm :tabmove$/;"	m
<LEADER>tn	core/mappings.vim	/^nnoremap <LEADER>tn :tabnew<CR>$/;"	m
<LEADER>w"	core/mappings.vim	/^nnoremap <LEADER>w"  bi"<esc>ea"<esc>$/;"	m
<LEADER>w'	core/mappings.vim	/^nnoremap <LEADER>w'  bi'<esc>ea'<esc>$/;"	m
<Leader>w	core/mappings.vim	/^noremap <Leader>w :w<CR>$/;"	m
<S-TAB>	layers/+completion/coc/config.vim	/^inoremap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<C-h>"$/;"	m
<TAB>	layers/+completion/coc/config.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<cr>	layers/+completion/coc/config.vim	/^inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\\<C-g>u\\<CR>\\<c-r>=coc#on_enter()\\<CR>"$/;"	m
<down>	core/mappings.vim	/^nnoremap <down> :res -5<CR>$/;"	m
<left>	core/mappings.vim	/^nnoremap <left> :vertical resize-5<CR>$/;"	m
<right>	core/mappings.vim	/^nnoremap <right> :vertical resize+5<CR>$/;"	m
<up>	core/mappings.vim	/^nnoremap <up> :res +5<CR>$/;"	m
BuffetSetCustomColors	layers/+ui/buffet/config.vim	/^function! g:BuffetSetCustomColors()$/;"	f
MyAutoCmd	core/general.vim	/^augroup MyAutoCmd$/;"	a
MyAutoCmd	layers/+completion/coc/config.vim	/^augroup MyAutoCmd$/;"	a
Y	core/mappings.vim	/^nnoremap Y y\$$/;"	m
[b	core/mappings.vim	/^nnoremap  [b :bn<CR>$/;"	m
]b	core/mappings.vim	/^nnoremap  ]b :bp<CR>$/;"	m
check_back_space	layers/+completion/coc/config.vim	/^function! s:check_back_space() abort$/;"	f
check_custom_settings	autoload/etc.vim	/^function! s:check_custom_settings(filename)abort$/;"	f
etc#_parse_config_files	autoload/etc.vim	/^function! etc#_parse_config_files(config_paths) abort$/;"	f
etc#init	autoload/etc.vim	/^function! etc#init() abort$/;"	f
etc#providers#dein#_init	autoload/etc/providers/dein.vim	/^function! etc#providers#dein#_init(config_paths) abort$/;"	f
etc#util#_find_yaml2json_method	autoload/etc/util.vim	/^function! etc#util#_find_yaml2json_method() abort$/;"	f
etc#util#_test_python_yaml	autoload/etc/util.vim	/^function! etc#util#_test_python_yaml() abort$/;"	f
etc#util#_test_ruby_yaml	autoload/etc/util.vim	/^function! etc#util#_test_ruby_yaml() abort$/;"	f
etc#util#_test_yaml2json	autoload/etc/util.vim	/^function! etc#util#_test_yaml2json() abort$/;"	f
etc#util#error	autoload/etc/util.vim	/^function! etc#util#error(msg) abort$/;"	f
etc#util#load_config	autoload/etc/util.vim	/^function! etc#util#load_config(filename) abort$/;"	f
etc#util#load_yaml	autoload/etc/util.vim	/^function! etc#util#load_yaml(filename) abort$/;"	f
etc#util#source_file	autoload/etc/util.vim	/^function! etc#util#source_file(path,...) abort$/;"	f
etc#util#str2list	autoload/etc/util.vim	/^function! etc#util#str2list(expr) abort$/;"	f
g:buffet_tab_icon	layers/+ui/buffet/config.vim	/^let g:buffet_tab_icon = "\\uf00a"$/;"	v
g:clipboard	core/general.vim	/^    let g:clipboard = {$/;"	v
g:coc_global_extensions	layers/+completion/coc/config.vim	/^let g:coc_global_extensions =['coc-html','coc-css','coc-snippets','coc-prettier','coc-eslint','coc-emmet','coc-tsserver','coc-pairs','coc-json','coc-python','coc-imselect','coc-highlight','coc-git','coc-emoji','coc-lists','coc-post','coc-stylelint','coc-yaml','coc-template','coc-tabnine','coc-marketplace','coc-gitignore','coc-yank','coc-explorer','coc-go']$/;"	v
g:coc_snippet_next	layers/+completion/coc/config.vim	/^let g:coc_snippet_next = '<TAB>'$/;"	v
g:coc_snippet_prev	layers/+completion/coc/config.vim	/^let g:coc_snippet_prev = '<S-TAB>'$/;"	v
g:coc_status_error_sign	layers/+completion/coc/config.vim	/^let g:coc_status_error_sign = '•'$/;"	v
g:coc_status_warning_sign	layers/+completion/coc/config.vim	/^let g:coc_status_warning_sign = '•'$/;"	v
g:etc#cache_path	autoload/etc.vim	/^let g:etc#cache_path =$/;"	v
g:etc#config_paths	autoload/etc.vim	/^let g:etc#config_paths = get(g:,'etc#config_paths',[$/;"	v
g:etc#package_manager	autoload/etc.vim	/^let g:etc#package_manager = get(g:,'etc#package_manager','dein')$/;"	v
g:etc#vim_path	autoload/etc.vim	/^let g:etc#vim_path =$/;"	v
g:yaml2json_method	autoload/etc/util.vim	/^let g:yaml2json_method = ''$/;"	v
j	core/mappings.vim	/^nnoremap j gj$/;"	m
j	core/mappings.vim	/^vnoremap j gj$/;"	m
k	core/mappings.vim	/^nnoremap k gk$/;"	m
k	core/mappings.vim	/^vnoremap k gk$/;"	m
w"	core/mappings.vim	/^vnoremap w" xa""<esc>hpl$/;"	m
w'	core/mappings.vim	/^vnoremap w' xa''<esc>hpl$/;"	m
zz	core/mappings.vim	/^nnoremap <expr> zz (winline() == (winheight(0)+1) \/ 2) ?$/;"	m
