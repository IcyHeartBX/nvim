!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
$FZF_DEFAULT_COMMAND	layers/+completion/fzf/config.vim	/^  let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git\/*"'$/;"	v
$FZF_DEFAULT_OPTS	layers/+completion/fzf/config.vim	/^let $FZF_DEFAULT_OPTS='--layout=reverse'$/;"	v
,	layers/+thinkvim/config.vim	/^    inoremap <expr> , smartchr#one_of(',', ',')$/;"	m
,<Space>	core/mappings.vim	/^nnoremap <silent> ,<Space> :<C-u>silent! keeppatterns %substitute\/\\s\\+$\/\/e<CR>$/;"	m
-	layers/+thinkvim/config.vim	/^	nmap -         <Plug>(choosewin)$/;"	m
<C-O>	core/mappings.vim	/^inoremap <C-O> <Esc>o$/;"	m
<C-Q>	core/mappings.vim	/^imap <C-Q> <esc>:wq<CR>$/;"	m
<C-S>	core/mappings.vim	/^imap <C-S> <esc>:w<CR>$/;"	m
<C-a>	core/mappings.vim	/^cnoremap <C-a> <Home>$/;"	m
<C-b>	core/mappings.vim	/^cnoremap <C-b> <Left>$/;"	m
<C-b>	core/mappings.vim	/^noremap <expr> <C-b> max([winheight(0) - 2, 1])$/;"	m
<C-b>	layers/+thinkvim/config.vim	/^		nnoremap <expr><C-b> coc#util#has_float() ? coc#util#float_scroll(0) : "\\<C-b>"$/;"	m
<C-b>	layers/+thinkvim/config.vim	/^    nnoremap <silent> <C-b> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * -4)<CR>$/;"	m
<C-c>	layers/+thinkvim/config.vim	/^        nmap <silent> <C-c> <Plug>(coc-cursors-position)$/;"	m
<C-d>	core/mappings.vim	/^cnoremap <C-d> <Del>$/;"	m
<C-d>	layers/+thinkvim/config.vim	/^    nnoremap <silent> <C-d> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * 2)<CR>$/;"	m
<C-e>	core/mappings.vim	/^cnoremap <C-e> <End>$/;"	m
<C-e>	core/mappings.vim	/^noremap <expr> <C-e> (line("w$") >= line('$') ? "j" : "3\\<C-e>")$/;"	m
<C-f>	core/mappings.vim	/^cnoremap <C-f> <Right>$/;"	m
<C-f>	core/mappings.vim	/^noremap <expr> <C-f> max([winheight(0) - 2, 1])$/;"	m
<C-f>	layers/+thinkvim/config.vim	/^		nnoremap <expr><C-f> coc#util#has_float() ? coc#util#float_scroll(1) : "\\<C-f>"$/;"	m
<C-f>	layers/+thinkvim/config.vim	/^    nnoremap <silent> <C-f> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * 4)<CR>$/;"	m
<C-h>	core/mappings.vim	/^cnoremap <C-h> <BS>$/;"	m
<C-h>	core/mappings.vim	/^nnoremap <C-h> <C-w>h$/;"	m
<C-j>	core/mappings.vim	/^nnoremap <C-j> <C-w>j$/;"	m
<C-k>	core/mappings.vim	/^nnoremap <C-k> <C-w>k$/;"	m
<C-l>	core/mappings.vim	/^nnoremap <C-l> <C-w>l$/;"	m
<C-m>	layers/+thinkvim/config.vim	/^        nmap <expr> <silent> <C-m> <SID>select_current_word()$/;"	m
<C-p>	core/mappings.vim	/^cnoremap <C-p> <Up>$/;"	m
<C-t>	core/mappings.vim	/^cnoremap <C-t> <C-R>=expand("%:p:h") . "\/" <CR>$/;"	m
<C-u>	layers/+thinkvim/config.vim	/^    nnoremap <silent> <C-u> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * -2)<CR>$/;"	m
<C-x>	core/mappings.vim	/^nnoremap  <C-x> :bd<CR>$/;"	m
<C-y>	core/mappings.vim	/^noremap <expr> <C-y> (line("w0") <= 1         ? "k" : "3\\<C-y>")$/;"	m
<LEADER>d"	core/mappings.vim	/^nnoremap <LEADER>d" ebF"xf"x$/;"	m
<LEADER>d'	core/mappings.vim	/^nnoremap <LEADER>d' ebF'xf'x$/;"	m
<LEADER>ev	core/mappings.vim	/^nnoremap <LEADER>ev :vsplit $MYVIMRC<CR>$/;"	m
<LEADER>l"	core/mappings.vim	/^nnoremap <LEADER>l"  ^i"<esc>g_a"<esc>$/;"	m
<LEADER>l'	core/mappings.vim	/^nnoremap <LEADER>l'  ^i'<esc>g_a"<esc>$/;"	m
<LEADER>sh	core/mappings.vim	/^nnoremap <LEADER>sh :set nosplitright<CR>:vsplit<CR>$/;"	m
<LEADER>sj	core/mappings.vim	/^nnoremap <LEADER>sj :set splitbelow<CR>:split<CR>$/;"	m
<LEADER>sk	core/mappings.vim	/^nnoremap <LEADER>sk :set nosplitbelow<CR>:split<CR>$/;"	m
<LEADER>sl	core/mappings.vim	/^nnoremap <LEADER>sl :set splitright<CR>:vsplit<CR>$/;"	m
<LEADER>sv	core/mappings.vim	/^nnoremap <LEADER>sv :source $MYVIMRC<CR>$/;"	m
<LEADER>te	core/mappings.vim	/^nnoremap <LEADER>te :tabe$/;"	m
<LEADER>th	core/mappings.vim	/^nnoremap <LEADER>th :-tabnext<CR>$/;"	m
<LEADER>tl	core/mappings.vim	/^nnoremap <LEADER>tl :+tabnext<CR>$/;"	m
<LEADER>tm	core/mappings.vim	/^nnoremap <LEADER>tm :tabmove$/;"	m
<LEADER>tn	core/mappings.vim	/^nnoremap <LEADER>tn :tabnew<CR>$/;"	m
<LEADER>w"	core/mappings.vim	/^nnoremap <LEADER>w"  bi"<esc>ea"<esc>$/;"	m
<LEADER>w'	core/mappings.vim	/^nnoremap <LEADER>w'  bi'<esc>ea'<esc>$/;"	m
<Leader>-	layers/+thinkvim/config.vim	/^	nmap <Leader>- :<C-u>ChooseWinSwapStay<CR>$/;"	m
<Leader><Leader>b	layers/+thinkvim/config.vim	/^	    nmap <Leader><Leader>b <Plug>(easymotion-b)$/;"	m
<Leader><Leader>f	layers/+thinkvim/config.vim	/^	    nmap <Leader><Leader>f <Plug>(easymotion-f)$/;"	m
<Leader><Leader>w	layers/+thinkvim/config.vim	/^        nmap <Leader><Leader>w <Plug>(easymotion-w)$/;"	m
<Leader>F	layers/+thinkvim/config.vim	/^         nnoremap <silent> <Leader>F$/;"	m
<Leader>G	layers/+thinkvim/config.vim	/^	nnoremap <Leader>G :Goyo<CR>$/;"	m
<Leader>e	layers/+thinkvim/config.vim	/^        nnoremap <silent> <Leader>e$/;"	m
<Leader>gB	layers/+thinkvim/config.vim	/^	nnoremap <silent> <Leader>gB :Gbrowse<CR>$/;"	m
<Leader>gS	layers/+thinkvim/config.vim	/^	nnoremap <silent> <Leader>gS :Gstatus<CR>$/;"	m
<Leader>gb	layers/+thinkvim/config.vim	/^	nnoremap <silent> <Leader>gb :Gblame<CR>$/;"	m
<Leader>gc	layers/+thinkvim/config.vim	/^	nnoremap <silent> <Leader>gc :Gcommit<CR>$/;"	m
<Leader>gd	layers/+thinkvim/config.vim	/^	nnoremap <silent> <Leader>gd :Gdiff<CR>$/;"	m
<Leader>gh	layers/+thinkvim/config.vim	/^	    nnoremap <silent> <Leader>gh :<C-u>Denite gitbranch<CR>$/;"	m
<Leader>gl	layers/+thinkvim/config.vim	/^        nnoremap <silent> <Leader>gl :<C-u>Denite gitlog:all<CR>$/;"	m
<Leader>gp	layers/+thinkvim/config.vim	/^	nnoremap <silent><Leader>gp :Gina push<CR>$/;"	m
<Leader>w	core/mappings.vim	/^noremap <Leader>w :w<CR>$/;"	m
<LocalLeader>gC	layers/+thinkvim/config.vim	/^	 nnoremap <silent> <LocalLeader>gC :GoCallers<CR>$/;"	m
<LocalLeader>gc	layers/+thinkvim/config.vim	/^	 nnoremap <silent> <LocalLeader>gc :GoCallees<CR>$/;"	m
<LocalLeader>gd	layers/+thinkvim/config.vim	/^	 nnoremap <silent> <LocalLeader>gd :GoDescribe<CR>$/;"	m
<LocalLeader>gi	layers/+thinkvim/config.vim	/^	 nnoremap <silent> <LocalLeader>gi :GoImpl<CR>$/;"	m
<LocalLeader>gs	layers/+thinkvim/config.vim	/^	 nnoremap <silent> <LocalLeader>gs :GoCallstack<CR>$/;"	m
<LocalLeader>m	layers/+thinkvim/config.vim	/^        nnoremap <silent><LocalLeader>m :<C-u>Denite menu<CR>$/;"	m
<S-TAB>	layers/+completion/coc/config.vim	/^inoremap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<C-h>"$/;"	m
<TAB>	layers/+completion/coc/config.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<c-space>	layers/+thinkvim/config.vim	/^        inoremap <silent><expr> <c-space> coc#refresh()$/;"	m
<cr>	layers/+completion/coc/config.vim	/^inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\\<C-g>u\\<CR>\\<c-r>=coc#on_enter()\\<CR>"$/;"	m
<down>	core/mappings.vim	/^nnoremap <down> :res -5<CR>$/;"	m
<leader>	layers/+thinkvim/config.vim	/^		nnoremap <silent> <leader>      :<c-u>WhichKey '<Space>'<CR>$/;"	m
<leader>ac	layers/+thinkvim/config.vim	/^        nmap <leader>ac  <Plug>(coc-codeaction)$/;"	m
<leader>bb	layers/+thinkvim/config.vim	/^        nnoremap <silent> <leader>bb :Buffers<CR>$/;"	m
<leader>ca	layers/+thinkvim/config.vim	/^        nmap <leader>ca  <Plug>(coc-codeaction-selected)$/;"	m
<leader>cc	layers/+thinkvim/config.vim	/^        nnoremap <silent> <leader>cc  :<C-u>CocList commands<cr>$/;"	m
<leader>cd	layers/+thinkvim/config.vim	/^        nnoremap <silent> <leader>cd  :<C-u>CocList diagnostics<cr>$/;"	m
<leader>ce	layers/+thinkvim/config.vim	/^        nnoremap <silent> <leader>ce  :<C-u>CocList extensions<cr>$/;"	m
<leader>cf	layers/+thinkvim/config.vim	/^        nmap <leader>cf  <Plug>(coc-format-selected)$/;"	m
<leader>cf	layers/+thinkvim/config.vim	/^        vmap <leader>cf  <Plug>(coc-format-selected)$/;"	m
<leader>cg	layers/+thinkvim/config.vim	/^        nnoremap <silent> <leader>cg  :<C-u>CocList --normal gstatus<CR>$/;"	m
<leader>cj	layers/+thinkvim/config.vim	/^        nnoremap <silent> <leader>cj  :<C-u>CocNext<CR>$/;"	m
<leader>ck	layers/+thinkvim/config.vim	/^        nnoremap <silent> <leader>ck  :<C-u>CocPrev<CR>$/;"	m
<leader>cm	layers/+thinkvim/config.vim	/^        nnoremap <silent> <leader>cm ::CocSearch -w $/;"	m
<leader>cn	layers/+thinkvim/config.vim	/^        nmap <leader>cn <Plug>(coc-rename)$/;"	m
<leader>co	layers/+thinkvim/config.vim	/^        nnoremap <silent> <leader>co  :<C-u>CocList outline<cr>$/;"	m
<leader>cr	layers/+thinkvim/config.vim	/^        nnoremap <silent> <leader>cr  :<C-u>CocListResume<CR>$/;"	m
<leader>cs	layers/+thinkvim/config.vim	/^        nnoremap <silent> <leader>cs  :<C-u>CocList -I symbols<cr>$/;"	m
<leader>cw	layers/+thinkvim/config.vim	/^        nnoremap <silent> <leader>cw ::CocSearch  $/;"	m
<leader>d	layers/+thinkvim/config.vim	/^        nnoremap <silent><leader>d :Dash<CR>$/;"	m
<leader>fc	layers/+thinkvim/config.vim	/^        nnoremap <silent> <leader>fc :Colors<CR>$/;"	m
<leader>ff	layers/+thinkvim/config.vim	/^        nnoremap <silent> <leader>ff :call Fzf_dev()<CR>$/;"	m
<leader>fr	layers/+thinkvim/config.vim	/^        nnoremap <silent> <leader>fr :Rg<CR>$/;"	m
<leader>fv	layers/+thinkvim/config.vim	/^        nnoremap <silent><leader>fv     :Vista finder coc<CR>$/;"	m
<leader>fw	layers/+thinkvim/config.vim	/^        nnoremap <silent> <leader>fw :Rg <C-R><C-W><CR>$/;"	m
<leader>j	layers/+thinkvim/config.vim	/^        noremap <silent> <leader>j :execute 'CocCommand explorer' .$/;"	m
<leader>m	layers/+thinkvim/config.vim	/^    nnoremap <silent> <leader>m :MundoToggle<CR>$/;"	m
<leader>qf	layers/+thinkvim/config.vim	/^        nmap <leader>qf  <Plug>(coc-fix-current)$/;"	m
<leader>s	layers/+thinkvim/config.vim	/^    nnoremap <silent> <leader>s :Startify<CR>$/;"	m
<leader>x	layers/+thinkvim/config.vim	/^        nmap <leader>x  <Plug>(coc-cursors-operator)$/;"	m
<left>	core/mappings.vim	/^nnoremap <left> :vertical resize-5<CR>$/;"	m
<localleader>	layers/+thinkvim/config.vim	/^		nnoremap <silent> <localleader> :<c-u>WhichKey  ';'<CR>$/;"	m
<localleader>r	layers/+thinkvim/config.vim	/^    nnoremap <silent> <localleader>r :QuickRun<CR>$/;"	m
<localleader>v	layers/+thinkvim/config.vim	/^        nnoremap <silent><localleader>v :Vista!!<CR>$/;"	m
<right>	core/mappings.vim	/^nnoremap <right> :vertical resize+5<CR>$/;"	m
<up>	core/mappings.vim	/^nnoremap <up> :res +5<CR>$/;"	m
BuffetSetCustomColors	layers/+ui/buffet/config.vim	/^function! g:BuffetSetCustomColors()$/;"	f
Find	layers/+completion/fzf/config.vim	/^  command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git\/*" --color "always" '.shellescape(<q-args>).'| tr -d "\\017"', 1, <bang>0)$/;"	c
FloatingFZF	layers/+completion/fzf/config.vim	/^function! FloatingFZF()$/;"	f
Fzf_dev	layers/+completion/fzf/config.vim	/^function! Fzf_dev()$/;"	f
InitCaw	layers/+thinkvim/config.vim	/^    function! InitCaw() abort$/;"	f
K	layers/+thinkvim/config.vim	/^        nnoremap <silent> K :call CocActionAsync('doHover')<CR>$/;"	m
MyAutoCmd	core/general.vim	/^augroup MyAutoCmd$/;"	a
MyAutoCmd	layers/+completion/coc/config.vim	/^augroup MyAutoCmd$/;"	a
Y	core/mappings.vim	/^nnoremap Y y\$$/;"	m
[	layers/+thinkvim/config.vim	/^		nnoremap <silent>[              :<c-u>WhichKey  '['<CR>$/;"	m
[a	layers/+thinkvim/config.vim	/^        nmap [a <Plug>(ale_next_wrap)$/;"	m
[b	core/mappings.vim	/^nnoremap  [b :bn<CR>$/;"	m
[c	layers/+thinkvim/config.vim	/^        nmap <silent> [c <Plug>(coc-diagnostic-next)$/;"	m
[g	layers/+thinkvim/config.vim	/^        nmap [g <Plug>(coc-git-prevchunk)$/;"	m
]	layers/+thinkvim/config.vim	/^		nnoremap <silent>]              :<c-u>WhichKey  ']'<CR>$/;"	m
]a	layers/+thinkvim/config.vim	/^        nmap ]a <Plug>(ale_previous_wrap)$/;"	m
]b	core/mappings.vim	/^nnoremap  ]b :bp<CR>$/;"	m
]c	layers/+thinkvim/config.vim	/^        nmap <silent> ]c <Plug>(coc-diagnostic-prev)$/;"	m
]g	layers/+thinkvim/config.vim	/^        nmap ]g <Plug>(coc-git-nextchunk)$/;"	m
ab	layers/+thinkvim/config.vim	/^	omap <silent> ab <Plug>(textobj-multiblock-a)$/;"	m
ab	layers/+thinkvim/config.vim	/^     omap ab <Plug>(textobj-sandwich-auto-a)$/;"	m
as	layers/+thinkvim/config.vim	/^     omap as <Plug>(textobj-sandwich-query-a)$/;"	m
check_back_space	layers/+completion/coc/config.vim	/^function! s:check_back_space() abort$/;"	f
check_custom_settings	autoload/etc.vim	/^function! s:check_custom_settings(filename)abort$/;"	f
edit_file	layers/+completion/fzf/config.vim	/^  function! s:edit_file(items)$/;"	f
etc#_parse_config_files	autoload/etc.vim	/^function! etc#_parse_config_files(config_paths) abort$/;"	f
etc#init	autoload/etc.vim	/^function! etc#init() abort$/;"	f
etc#providers#dein#_init	autoload/etc/providers/dein.vim	/^function! etc#providers#dein#_init(config_paths) abort$/;"	f
etc#util#_find_yaml2json_method	autoload/etc/util.vim	/^function! etc#util#_find_yaml2json_method() abort$/;"	f
etc#util#_test_python_yaml	autoload/etc/util.vim	/^function! etc#util#_test_python_yaml() abort$/;"	f
etc#util#_test_ruby_yaml	autoload/etc/util.vim	/^function! etc#util#_test_ruby_yaml() abort$/;"	f
etc#util#_test_yaml2json	autoload/etc/util.vim	/^function! etc#util#_test_yaml2json() abort$/;"	f
etc#util#error	autoload/etc/util.vim	/^function! etc#util#error(msg) abort$/;"	f
etc#util#load_config	autoload/etc/util.vim	/^function! etc#util#load_config(filename) abort$/;"	f
etc#util#load_yaml	autoload/etc/util.vim	/^function! etc#util#load_yaml(filename) abort$/;"	f
etc#util#source_file	autoload/etc/util.vim	/^function! etc#util#source_file(path,...) abort$/;"	f
etc#util#str2list	autoload/etc/util.vim	/^function! etc#util#str2list(expr) abort$/;"	f
g:buffet_tab_icon	layers/+ui/buffet/config.vim	/^let g:buffet_tab_icon = "\\uf00a"$/;"	v
g:clipboard	core/general.vim	/^    let g:clipboard = {$/;"	v
g:coc_global_extensions	layers/+completion/coc/config.vim	/^let g:coc_global_extensions =['coc-html','coc-css','coc-snippets','coc-prettier','coc-eslint','coc-emmet','coc-tsserver','coc-pairs','coc-json','coc-python','coc-imselect','coc-highlight','coc-git','coc-emoji','coc-lists','coc-post','coc-stylelint','coc-yaml','coc-template','coc-tabnine','coc-marketplace','coc-gitignore','coc-yank','coc-explorer','coc-go']$/;"	v
g:coc_snippet_next	layers/+completion/coc/config.vim	/^let g:coc_snippet_next = '<TAB>'$/;"	v
g:coc_snippet_prev	layers/+completion/coc/config.vim	/^let g:coc_snippet_prev = '<S-TAB>'$/;"	v
g:coc_status_error_sign	layers/+completion/coc/config.vim	/^let g:coc_status_error_sign = '•'$/;"	v
g:coc_status_warning_sign	layers/+completion/coc/config.vim	/^let g:coc_status_warning_sign = '•'$/;"	v
g:etc#cache_path	autoload/etc.vim	/^let g:etc#cache_path =$/;"	v
g:etc#config_paths	autoload/etc.vim	/^let g:etc#config_paths = get(g:,'etc#config_paths',[$/;"	v
g:etc#package_manager	autoload/etc.vim	/^let g:etc#package_manager = get(g:,'etc#package_manager','dein')$/;"	v
g:etc#vim_path	autoload/etc.vim	/^let g:etc#vim_path =$/;"	v
g:fzf_action	layers/+completion/fzf/config.vim	/^let g:fzf_action = {$/;"	v
g:fzf_colors	layers/+completion/fzf/config.vim	/^let g:fzf_colors =$/;"	v
g:fzf_commits_log_options	layers/+completion/fzf/config.vim	/^let g:fzf_commits_log_options = '--graph --color=always$/;"	v
g:fzf_layout	layers/+completion/fzf/config.vim	/^let g:fzf_layout = { 'window': 'call FloatingFZF()' }$/;"	v
g:splitjoin_join_mapping	layers/+thinkvim/config.vim	/^        let g:splitjoin_join_mapping = ''$/;"	v
g:splitjoin_split_mapping	layers/+thinkvim/config.vim	/^        let g:splitjoin_split_mapping = ''$/;"	v
g:which_key_localmap	layers/+tools/whichkey/config.vim	/^let g:which_key_localmap ={$/;"	v
g:which_key_lsbgmap	layers/+tools/whichkey/config.vim	/^let g:which_key_lsbgmap = {$/;"	v
g:which_key_map	layers/+tools/whichkey/config.vim	/^let g:which_key_map =  {}$/;"	v
g:which_key_map	layers/+tools/whichkey/config.vim	/^let g:which_key_map = {$/;"	v
g:which_key_map	layers/+tools/whichkey/config.vim	/^let g:which_key_map[' '] = {$/;"	v
g:which_key_rsbgmap	layers/+tools/whichkey/config.vim	/^let g:which_key_rsbgmap = {$/;"	v
g:yaml2json_method	autoload/etc/util.vim	/^let g:yaml2json_method = ''$/;"	v
ga	layers/+thinkvim/config.vim	/^    nmap ga <Plug>(EasyAlign)$/;"	m
gd	layers/+thinkvim/config.vim	/^        nmap <silent> gd <Plug>(coc-definition)$/;"	m
gi	layers/+thinkvim/config.vim	/^        nmap <silent> gi <Plug>(coc-implementation)$/;"	m
gm	layers/+thinkvim/config.vim	/^        nmap gm <Plug>(coc-git-commit)$/;"	m
gr	layers/+thinkvim/config.vim	/^        nmap <silent> gr <Plug>(coc-references)$/;"	m
gs	layers/+thinkvim/config.vim	/^        nmap gs <Plug>(coc-git-chunkinfo)$/;"	m
gy	layers/+thinkvim/config.vim	/^        nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
ib	layers/+thinkvim/config.vim	/^	omap <silent> ib <Plug>(textobj-multiblock-i)$/;"	m
ib	layers/+thinkvim/config.vim	/^     omap ib <Plug>(textobj-sandwich-auto-i)$/;"	m
is	layers/+thinkvim/config.vim	/^     omap is <Plug>(textobj-sandwich-query-i)$/;"	m
j	core/mappings.vim	/^nnoremap j gj$/;"	m
j	core/mappings.vim	/^vnoremap j gj$/;"	m
j	layers/+thinkvim/config.vim	/^	nmap <silent>j <Plug>(accelerated_jk_gj)$/;"	m
k	core/mappings.vim	/^nnoremap k gk$/;"	m
k	core/mappings.vim	/^vnoremap k gk$/;"	m
k	layers/+thinkvim/config.vim	/^	nmap <silent>k <Plug>(accelerated_jk_gk)$/;"	m
mg	layers/+thinkvim/config.vim	/^	nnoremap <silent> mg :Magit<CR>$/;"	m
my_denite_decls	layers/+thinkvim/config.vim	/^        function! s:my_denite_decls(filetype) abort$/;"	f
my_denite_file_rec_goroot	layers/+thinkvim/config.vim	/^        function! s:my_denite_file_rec_goroot() abort$/;"	f
my_denite_outline	layers/+thinkvim/config.vim	/^        function! s:my_denite_outline(filetype) abort$/;"	f
opts	layers/+completion/fzf/config.vim	/^  let opts = fzf#wrap({})$/;"	v
opts	layers/+completion/fzf/config.vim	/^  let opts.options .= l:fzf_files_options$/;"	v
opts	layers/+completion/fzf/config.vim	/^  let opts.source = <sid>files()$/;"	v
opts	layers/+completion/fzf/config.vim	/^  let opts['sink*'] = function('s:edit_file')$/;"	v
prepend_icon	layers/+completion/fzf/config.vim	/^  function! s:prepend_icon(candidates)$/;"	f
s:Sink	layers/+completion/fzf/config.vim	/^  let s:Sink = opts['sink*']$/;"	v
s:current_colorscheme	layers/+tools/whichkey/config.vim	/^let s:current_colorscheme = get(g:,"colors_name","")$/;"	v
sa	layers/+thinkvim/config.vim	/^     nmap <silent> sa <Plug>(operator-sandwich-add)$/;"	m
sa	layers/+thinkvim/config.vim	/^     omap <silent> sa <Plug>(operator-sandwich-g@)$/;"	m
sd	layers/+thinkvim/config.vim	/^     nmap <silent> sd <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)$/;"	m
sdb	layers/+thinkvim/config.vim	/^     nmap <silent> sdb <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)$/;"	m
select_current_word	layers/+thinkvim/config.vim	/^        function! s:select_current_word()$/;"	f
sj	layers/+thinkvim/config.vim	/^        nmap sj :SplitjoinJoin<CR>$/;"	m
sk	layers/+thinkvim/config.vim	/^        nmap sk :SplitjoinSplit<CR>$/;"	m
sr	layers/+thinkvim/config.vim	/^     nmap <silent> sr <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)$/;"	m
srb	layers/+thinkvim/config.vim	/^     nmap <silent> srb <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)$/;"	m
w"	core/mappings.vim	/^vnoremap w" xa""<esc>hpl$/;"	m
w'	core/mappings.vim	/^vnoremap w' xa''<esc>hpl$/;"	m
zL	layers/+thinkvim/config.vim	/^        noremap zL :<C-u>call <SID>my_denite_decls(&filetype)<CR>$/;"	m
zT	layers/+thinkvim/config.vim	/^        noremap zT :<C-u>call <SID>my_denite_file_rec_goroot()<CR>$/;"	m
zl	layers/+thinkvim/config.vim	/^        noremap zl :<C-u>call <SID>my_denite_outline(&filetype)<CR>$/;"	m
zz	core/mappings.vim	/^nnoremap <expr> zz (winline() == (winheight(0)+1) \/ 2) ?$/;"	m
{{	layers/+thinkvim/config.vim	/^	nmap <buffer> {{ [%$/;"	m
}}	layers/+thinkvim/config.vim	/^	nmap <buffer> }} ]%$/;"	m
